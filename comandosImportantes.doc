npm init -y

npx eslint --init

npm i nodemon sucrase --save-dev

sucrase permite que utilize import e export dos modulos do ES6 (ecmaScript)

ai temos que fazer o nodemon registrar o sucrase quando usarmos o nodemon (checar o arquivo nodemon.json)


como é uma api rest não vai ser mvc vai ser um MC. não tem view em si.

npm i dotenv


usando Sequelize para criar, editar campos na tabela...
usaremos ele para tudo que vai mexer com o banco de dados
comando instalando tanto sequelize quanto mariadb
para olhar as configurações dele veja o arquivo .sequelizerc e config/database.js

npm i sequelize mariadb

npm i -D sequelize-cli


e para criar a primeira tabela basta usar o comando

npx sequelize migration:create --name=alunos

depois de criar a o migration você configura ele para criar os campos desejados
e toda vez que for realizar uma alteração deve se gerar um novo por boa pratica.
Ele marca data e tabela no nome ex: 20220301045114-alunos

agora para iniciar ele no banco de dados:

npx sequelize db:migrate

caso tenha feito algo errado na migração basta usar 'undo' npx sequelize db:migrate:undo

como vamos lidar com senhas de usuarios temos que usar algo para camuflar as senhas

npm i bcryptjs

para criar o token da sessão.
npm i jsonwebtoken


Para criar conteudo nas tabelas usamos as seeds, assim fica mais fácil de injetar
conteudo no banco de dados e ficar testando porém a outras funcionalidades

npx sequelize seed:generate --name criar-usuarios

e depois de preencher as configurações da seed ai sim podemos colocar no banco de dados
usando:

npx sequelize db:seed:all

lembrando que usei all pois queria que fossem todos, mas poderia ter sido no lugar de all
o nome da tabela.


antes eu tinha montado a tabela alunos com e-mail sem ser unique então criei uma migration
para usar esse e-mail do aluno como unique

npx sequelize migration:create --name=mudar-email-aluno-unique

criei a configuração da migrate e então subi para o banco de dados.

npx Sequelize migrate:db
